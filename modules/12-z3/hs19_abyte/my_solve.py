#!/usr/bin/python3

from z3 import *

expected = [0x69, 0x72, 0x62, 0x75, 0x67, 0x7a, 0x76, 0x31, 0x76, 0x5e, 0x78, 0x31, 0x74, 0x5e, 0x6a, 0x6f, 0x31, 0x76, 0x5e, 0x65, 0x35, 0x5e, 0x76, 0x40, 0x32, 0x5e, 0x39, 0x69, 0x33, 0x63, 0x40, 0x31, 0x33, 0x38, 0x7c]

z = Solver()

test_bytes = []
for i in range(0x23):
	byte = BitVec(str(i), 8)		# 8-bit for each element
	test_bytes.append(byte)

for i in range(0x23):
	z.add( (test_bytes[i] ^ 1)  == expected[i])

if z.check() == sat:
	solution = z.model()
	flag = ""
	for i in range(0x23):
		cur = solution[test_bytes[i]]
		flag += chr(int(str(cur)))			# str cast because it is BitVec like above
	print (flag)
	 
